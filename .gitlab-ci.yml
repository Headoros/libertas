stages:
  - lint
  - test
  - build
  - deploy
  - quality

variables:
  DOCKER_REGISTRY: "mikeyspikey"
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  K8S_NAMESPACE: "default"
  CACHE_DIR: "node_modules"
  SONAR_HOST_URL: "http://sonarqube:9000"

# Reusable components
.node_modules_cache: &node_modules_cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - "**/node_modules"
    policy: pull-push

.docker_login: &docker_login
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

lint:
  stage: lint
  image: node:18-alpine
  <<: *node_modules_cache
  script:
    - find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | xargs -I{} sh -c "cd {} && echo 'Linting {}' && npm install && npm run lint"
  only:
    - merge_requests
    - master

test:
  stage: test
  image: node:18-alpine
  <<: *node_modules_cache
  script:
    - find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | xargs -I{} sh -c "cd {} && echo 'Testing {}' && npm install && npm test"
  only:
    - merge_requests
    - master

build:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  <<: *docker_login
  script:
    - apk add --no-cache bash find jq
    # Find all directories with package.json that contain an Express app
    - EXPRESS_APPS=$(find . -name "package.json" -not -path "*/node_modules/*" -exec grep -l "express" {} \; | xargs -I{} dirname {})
    # Build and push Docker images for each Express app
    - |
      for APP_DIR in $EXPRESS_APPS; do
        APP_NAME=$(basename $APP_DIR)
        echo "Building Docker image for $APP_NAME"
        
        # Generate a Dockerfile if one doesn't exist
        if [ ! -f "$APP_DIR/Dockerfile" ]; then
          cat > "$APP_DIR/Dockerfile" << EOF
      FROM node:18-alpine
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci --only=production
      COPY . .
      EXPOSE 3000
      CMD ["node", "index.js"]
      EOF
        fi
        
        # Build and push the Docker image
        docker build -t $DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG $APP_DIR
        docker push $DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$APP_NAME:latest
        docker push $DOCKER_REGISTRY/$APP_NAME:latest
      done
  only:
    - master

deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  before_script:
    - mkdir -p $HOME/.kube
    - echo "$KUBECONFIG_BASE64" | base64 -d > $HOME/.kube/config
    - export KUBECONFIG="$HOME/.kube/config"
  script:
    - echo "Deploying to Kubernetes cluster in namespace $K8S_NAMESPACE..."
    - kubectl config get-contexts
    - CONTEXT=$(kubectl config current-context)
    - echo "Using current context: $CONTEXT"
    - kubectl config set-context --current --namespace="$K8S_NAMESPACE"
    
    # Dynamically update Kubernetes manifests with new image tags
    - |
      for file in $(find ./k8s -name "*.yaml" -o -name "*.yml" 2>/dev/null || echo ""); do
        if [ -f "$file" ]; then
          echo "Updating image tags in $file"
          sed -i "s|image: $DOCKER_REGISTRY/.*|image: $DOCKER_REGISTRY/\\1:$IMAGE_TAG|g" "$file"
        fi
      done
    
    # Apply Kubernetes configurations
    - kubectl apply -f ./k8s/
    
    # Verify deployments
    - |
      for deployment in $(kubectl get deployments -n $K8S_NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
        echo "Waiting for deployment $deployment to complete..."
        kubectl rollout status deployment/$deployment -n $K8S_NAMESPACE --timeout=180s
      done
  only:
    - master

sonarqube:
  stage: quality
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectKey=${CI_PROJECT_NAME} -Dsonar.projectName=${CI_PROJECT_NAME} -Dsonar.sources=. -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.exclusions=**/node_modules/**/*,**/dist/**/*
  only:
    - master