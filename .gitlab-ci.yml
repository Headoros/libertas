stages:
  - build_and_push
  - build_to_dockerhub
  - deploy
  - sonarqube

variables:
  IMAGE_NAME: "mikeyspikey/test"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  K8S_NAMESPACE: "default"
  CI_PROJECT_NAME: "Libertas"
  SONAR_TOKEN: "squ_d3b4e6bc3c19fa4c80581093e40405060d6fd551"
  DOCKER_TLS_CERTDIR: ""

default:
  before_script:
    - docker info

build_and_push:
  stage: build_and_push
  services:
    - docker:dind
  image: docker:latest
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker-compose build
    - docker compose push

build_to_dockerhub:
  stage: build_to_dockerhub
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
    - docker-compose build
    - docker compose push
  only:
    - master

deploy:
  stage: deploy
  # image:
  #   name: alpine/k8s:1.28.0
  #   entrypoint: ["/bin/sh", "-c"]
  image:
    name: alpine/k8s:1.28.0
    entrypoint: ["/bin/sh", "-c"]
  services:
    - name: docker:dind
      command: ["--host=unix:///var/run/docker.sock"]
  before_script:
    - apk add --no-cache yq
    - mkdir -p $HOME/.kube
    - echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config
    - export KUBECONFIG="$HOME/.kube/config"
    - cat $HOME/.kube/config
    - kubectl config get-contexts
  script:
    - kubectl get namespaces  # Test connectivity
    - kubectl apply -f . -n $K8S_NAMESPACE

sonarqube:
  stage: sonarqube
  image: sonarqube:lts-alpine
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=http://sonarqube-custom:9000 -Dsonar.login=$SONAR_TOKEN