stages:
  - build_and_push
  - build_to_dockerhub
  - sonarqube
  - test
  - deploy

variables:
  IMAGE_NAME: "mikeyspikey/test"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  K8S_NAMESPACE: "default"
  CI_PROJECT_NAME: "Libertas"
  SONAR_TOKEN: "sqp_e6678326772672d5ab4703f6c0d5377aaf284b03"
  DOCKER_TLS_CERTDIR: ""

build_and_push:
  stage: build_and_push
  services:
    - docker:dind
  image: docker:latest
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker-compose build
    - docker compose push

build_to_dockerhub:
  stage: build_to_dockerhub
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
    - docker-compose build
    - docker compose push
  only:
    - master

sonarqube:
  stage: sonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  allow_failure: true
  script:
    - sonar-scanner -Dsonar.projectKey=I431326_libertas_5e6a7ff3-81a8-42c4-b1bb-2252ede64057 -Dsonar.sources=. -Dsonar.host.url=http://sonarqube-custom:9000 -Dsonar.login=$SONAR_TOKEN

# test:
#   stage: test
#   image: node:latest # Or a specific Node.js version
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375 # Required for Docker-in-Docker
#   before_script:
#     - cd EventService
#     - npm install
#   script:
#     - cd services # Navigate into the services directory
#     - find -maxdepth 1 -type d -exec sh -c 'cd "$1" && npm test' _ {} \; # Run tests in each service
#   after_script:
#     - docker-compose -f docker-compose.test.yml down

deploy_cloud:
  stage: deploy
  image: alpine/k8s:1.28.0
  before_script:
    - apk add --no-cache yq

    # Install secure files download tool
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash    
    # Make .kube directory and move config file    
    - mkdir ~/.kube    
    - mv .secure_files/k8s-1-32-2-do-1-ams3-1747036125654-kubeconfig.yaml ~/.kube    
    - export KUBECONFIG=~/.kube/k8s-1-32-2-do-1-ams3-1747036125654-kubeconfig.yaml

    - kubectl config get-contexts
  script:
    - kubectl config use-context do-ams3-k8s-1-32-2-do-1-ams3-1747036125654
    # - kubectl delete -f k8s/first/
    # - kubectl delete -f k8s/second/
    - kubectl apply -f k8s/first/ -n $K8S_NAMESPACE
    - kubectl apply -f k8s/second/ -n $K8S_NAMESPACE
  environment:
    name: production

deploy:
  stage: deploy
  image: alpine/k8s:1.28.0
  before_script:
    - apk add --no-cache yq

    # Install secure files download tool
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash    
    # Make .kube directory and move config file    
    - mkdir ~/.kube    
    - mv .secure_files/config ~/.kube    
    - export KUBECONFIG=~/.kube/config

    - kubectl config get-contexts
  script:
    - kubectl config use-context docker-desktop
    - kubectl delete -f k8s/first/
    - kubectl delete -f k8s/second/
    - kubectl apply -f k8s/first/ -n $K8S_NAMESPACE
    - kubectl apply -f k8s/second/ -n $K8S_NAMESPACE
  environment:
    name: production