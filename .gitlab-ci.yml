stages:
  - build_and_push
  - kubectl
  - helm
  - deploy
  - sonarqube

variables:
  IMAGE_NAME: "mikeyspikey/test"
  IMAGE_TAG: "$CI_COMMIT_SHA"
  K8S_NAMESPACE: "default"
  CI_PROJECT_NAME: "Libertas"
  SONAR_TOKEN: "squ_d3b4e6bc3c19fa4c80581093e40405060d6fd551"

before_script:
  - apk add --no-cache docker-compose

build_and_push:
  stage: build_and_push
  services:
    - docker:dind
  image: docker:latest
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker info
    - docker-compose build

kubectl:
  stage: kubectl
  image: bitnami/kubectl:1.29.6
  script:
    - kubectl cluster-info
    - echo "Now you can use kubectl commands you want"

helm:
  stage: helm
  image: alpine/helm:3.15.2
  script:
    - helm version
    - echo "Now you can use helm commands you want"

deploy:
  stage: deploy
  image:
    name: alpine/k8s:1.28.0
    entrypoint: ["/bin/sh", "-c"]
  before_script:
    - apk add --no-cache yq
    - mkdir -p $HOME/.kube
    - echo "$KUBECONFIG_BASE64" | base64 -d > $HOME/.kube/config
    - export KUBECONFIG="$HOME/.kube/config"
  script:
    - echo "Deploying to Kubernetes cluster in namespace $K8S_NAMESPACE..."
    - kubectl config get-contexts
    - kubectl config use-context docker-desktop
    - kubectl config set-context --current --namespace="$K8S_NAMESPACE" # Ensure correct namespace
    - kubectl apply -f .

sonarqube:
  stage: sonarqube
  image: sonarqube:lts-alpine
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=http://sonarqube-custom:9000 -Dsonar.login=$SONAR_TOKEN